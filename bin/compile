#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin
OPT_DIR=$BP_DIR/opt
LIB_DIR=$BP_DIR/lib
. $LIB_DIR/common.sh

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

GRADLE_TASK=${GRADLE_TASK-stage}

print_env

vendored_node_version=6.6.0
node_dir=$CACHE_DIR/node
bower_app=$node_dir/lib/node_modules/bower
gulp_app=$node_dir/lib/node_modules/gulp

if [ ! -d $DIR/$VER ]; then
    status "Vendoring Node v$vendored_node_version to run Bower."
    echo "Node Linux Installer by www.github.com/taaem"
    echo "Need Root for installing NodeJS"

    echo "Get Latest Version Number..."
    {
      wget --output-document=node-updater.html https://nodejs.org/dist/latest/

      ARCH=$(uname -m)

      if [ $ARCH = x86_64 ]
      then
        grep -o '>node-v.*-linux-x64.tar.gz' node-updater.html > node-cache.txt 2>&1

        VER=$(grep -o 'node-v.*-linux-x64.tar.gz' node-cache.txt)
      else
        grep -o '>node-v.*-linux-x86.tar.gz' node-updater.html > node-cache.txt 2>&1
        
        VER=$(grep -o 'node-v.*-linux-x86.tar.gz' node-cache.txt)
      fi
      rm ./node-cache.txt
      rm ./node-updater.html
    } &> /dev/null

    echo "Done"

    DIR=$( cd "$( dirname $0 )" && pwd )

    echo "Downloading latest stable Version $VER..."
    {
      wget https://nodejs.org/dist/latest/$VER -O $DIR/$VER
    } &> /dev/null

    echo "Done"

    echo "Installing..."
    cd /usr/local && tar --strip-components 1 -xzf $DIR/$VER

    rm $DIR/$VER

    echo "Finished installing!"
fi

ls $DIR/$VER

if [ ! -d $bower_app ]; then
    status  "Installing bower"
    $DIR/$VER/bin/npm --silent -g install bower
fi

status "installed bower"

export bower_run=$DIR/$VERbin/bower
PATH=$PATH:$DIR/$VER/bin
  
cd $BUILD_DIR
status "Running: $bower_run --allow-root install"
$bower_run --allow-root install

status  "Installing npm dependencies"
$DIR/$VER/bin/npm --silent install

if [ -e gulpfile.js ]; then

  export gulp_run=$BUILD_DIR/node_modules/.bin/gulp

  status "Running: $gulp_run"
  $gulp_run --env=prod

fi

export_env_dir $ENV_DIR

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-"https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}... "
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

export GRADLE_USER_HOME=$CACHE_DIR/.gradle

if [ ! -f $BUILD_DIR/gradlew ] ; then
  echo "-----> Installing Gradle Wrapper..."
  echo "       WARNING: Your application does not have it's own gradlew file."
  echo "       We'll install one for you, but this is a deprecated feature and"
  echo "       in the future may not be supported."
  cp -rn ${OPT_DIR}/wrapper/* ${BUILD_DIR}
fi
BUILDCMD="./gradlew"
chmod +x ${BUILD_DIR}/gradlew

BUILDCMD="$BUILDCMD $GRADLE_TASK"

cd $BUILD_DIR

# build app
echo "-----> Building Gradle app..."
echo "       WARNING: The Gradle buildpack is currently in Beta."
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi
